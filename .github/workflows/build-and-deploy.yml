name: build-and-deploy-workflow

on:
  workflow_call:
    inputs:
      rootDomain:
        required: true
        type: string
      application-name:
        required: true
        type: string
      application-container-port:
        required: true
        type: string
      numberOfApplicationReplicas:
        required: true
        type: number
      path-pattern:
        required: true
        type: string
      needsDatabaseInstallation:
        required: true
        type: boolean

jobs:
  kubernetes-deployment:
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
      - name: CodeCheckout
        uses: actions/checkout@v3
        with:
          repository: ByteBlazer/build-and-deploy
          path: "./build-and-deloy-repo"
      - name: GetAllBranchNames
        id: GetAllBranchNames
        run: |
          gitHubBranchesUrl="$(echo '${{github.event.repository.branches_url}}'|sed 's/{\/branch}//g')";
          curl --location --request GET $gitHubBranchesUrl --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o branches.json
          branches="$(cat branches.json | jq -r '.[].name'|awk '{print $1}' ORS=",")"
          echo "::set-output name=branches::$branches"
      - name: view the secrets  context
        shell: bash
        id: ViewSecretKeys
        #secretKeys="$(cat secretKeys.json | jq -r '.|keys[]' | awk '{print $1}' ORS=",")"
        run: |
          echo "$SECRETS_CONTEXT">secrets.json
          keyValuePairsJsonString="$(cat secrets.json | awk '{print $0}' ORS="")"
          echo "::set-output name=keyValuePairsJsonString::$keyValuePairsJsonString"
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
      - name: EvaluateParams
        uses: actions/github-script@v6
        id: EvaluateParams
        with:
          result-encoding: string
          script: |
            const script = require('./build-and-deloy-repo/js/script.js');
            return script({ github, context, ${{steps.GetAllBranchNames.outputs.branches}},${{steps.ViewSecretKeys.outputs.keyValuePairsJsonString}} });
      - name: CodeCheckout
        uses: actions/checkout@v3
        with:
          ref: ${{fromJson(steps.EvaluateParams.outputs.result).branchRefToBeCheckedOut}}
      # - name: MakeFileCopies
      #   run:  cp kubernetes/file.yaml  kubernetes/copy-of-file.yaml
      - name: ConfigureKubectlCommand
        run: |
          echo 'Configuring kubectl command to talk to EKS cluster inside corporate AWS account.......'
          aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}
          echo '....configuration of kubectl command completed'
          kubectl get pods
      - name: ReplaceTokensInKubernetesDeploymentFiles
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: "<<"
          tokenSuffix: ">>"
          files: '["./build-and-deloy-repo/kubernetes/namespace.yaml","./build-and-deloy-repo/kubernetes/deployment.yaml","./build-and-deloy-repo/kubernetes/service.yaml","./build-and-deloy-repo/kubernetes/ingress.yaml"]'
        env:
          YAML_NAMESPACE: ${{fromJson(steps.EvaluateParams.outputs.result).namespace}}
          YAML_DEPLOYMENT_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).deploymentName}}
          YAML_DEPLOYMENT_NUMBER_OF_REPLICAS: ${{fromJson(steps.EvaluateParams.outputs.result).numberOfReplicas}}
          YAML_CONTAINER_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).containerName}}
          YAML_CONTAINER_PORT: ${{fromJson(steps.EvaluateParams.outputs.result).containerPort}}
          YAML_SERVICE_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).serviceName}}
          YAML_SERVICE_PORT: ${{fromJson(steps.EvaluateParams.outputs.result).servicePort}}
          YAML_NUMERIC_HASH_OF_HOST_AND_PORT: ${{fromJson(steps.EvaluateParams.outputs.result).numericHashOfHostAndPort}}
          YAML_INGRESS_LB_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).ingressLbName}}
          YAML_HOST: ${{fromJson(steps.EvaluateParams.outputs.result).hostName}}
          YAML_PATH_PATTERN: ${{fromJson(steps.EvaluateParams.outputs.result).pathPattern}}
          YAML_DOCKER_IMAGE_NAME_AND_TAG: ${{fromJson(steps.EvaluateParams.outputs.result).dockerImageNameAndTag}}
      - name: ReplaceTokensInKubernetesDatabaseDeploymentFiles
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: "<<"
          tokenSuffix: ">>"
          files: '["./build-and-deloy-repo/kubernetes/namespace.yaml","./build-and-deloy-repo/kubernetes/storage.yaml","./build-and-deloy-repo/kubernetes/deployment-db.yaml","./build-and-deloy-repo/kubernetes/service-db.yaml","./build-and-deloy-repo/kubernetes/ingress-db.yaml"]'
        env:
          YAML_NAMESPACE: ${{fromJson(steps.EvaluateParams.outputs.result).namespace}}
          YAML_DEPLOYMENT_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).deploymentNameForDatabase}}
          YAML_CONTAINER_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).containerNameForDatabase}}
          YAML_CONTAINER_PORT: ${{fromJson(steps.EvaluateParams.outputs.result).containerPortForDatabase}}
          YAML_SERVICE_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).serviceNameForDatabase}}
          YAML_SERVICE_PORT: ${{fromJson(steps.EvaluateParams.outputs.result).servicePortForDatabase}}
          YAML_NUMERIC_HASH_OF_HOST_AND_PORT: ${{fromJson(steps.EvaluateParams.outputs.result).numericHashOfHostAndPortForDatabase}}
          YAML_INGRESS_LB_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).ingressLbName}}
          YAML_HOST: ${{fromJson(steps.EvaluateParams.outputs.result).hostName}}
          YAML_DB_SCHEMA_NAME: ${{fromJson(steps.EvaluateParams.outputs.result).dbSchemaName}}
          YAML_HASH_BASED_DB_PASSWORD: ${{fromJson(steps.EvaluateParams.outputs.result).hashBasedDBPassword}}
      - name: DEBUG-ViewReplacedK8sYaml
        run: |
          echo "**************************************************************************"
          cat yamls/kubernetes/deployment.yaml
          echo "**************************************************************************"
          cat yamls/kubernetes/deployment-db.yaml
          echo "**************************************************************************"
          cat yamls/kubernetes/ingress.yaml
          echo "**************************************************************************"
          cat yamls/kubernetes/service.yaml
          echo "**************************************************************************"
          cat yamls/kubernetes/service-db.yaml
          echo "**************************************************************************"
      - name: DockerImageLayerCaching #You can comment out this whole step. It will only disable docker image caching and will not affect anything else
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - name: BuildAndPushDockerImage
        run: |
          echo "Going to login to Docker Hub....."
          echo "${{ secrets.DOCKER_LOGIN_PASSWORD}}"|docker login --username ${{ secrets.DOCKER_LOGIN_USER}} --password-stdin 
          echo ".......Logged in successfully to Docker  Hub"
          echo "Going to build the docker image......."
          dockerBuildCommandFirstPart="docker build -t ${{fromJson(steps.EvaluateParams.outputs.result).dockerImageNameAndTag}} . --quiet"
          dockerBuildCommandSecondPart="${{fromJson(steps.EvaluateParams.outputs.result).buildArgsCommandLineArgsForDockerBuild}}"
          dockerBuildCommand=$dockerBuildCommandFirstPart$dockerBuildCommandSecondPart
          echo "Docker Build Final Command:$dockerBuildCommand"
          eval $dockerBuildCommand
          echo ".......docker image built succesfully"
          echo "Going to push the docker image to docker hub......."
          docker push ${{fromJson(steps.EvaluateParams.outputs.result).dockerImageNameAndTag}} --quiet
          echo ".......image push to docker hub completed succesfully"
      - name: DeployToKubernetes
        run: |
          kubectl apply -f yamls/kubernetes/namespace.yaml,yamls/kubernetes/deployment.yaml,yamls/kubernetes/service.yaml,yamls/kubernetes/ingress.yaml
          kubectl apply -f yamls/kubernetes/namespace.yaml,yamls/kubernetes/storage.yaml,yamls/kubernetes/deployment-db.yaml,yamls/kubernetes/service-db.yaml
          kubectl apply -f yamls/kubernetes/deployment.yaml
          kubectl rollout restart deployment/${{fromJson(steps.EvaluateParams.outputs.result).serviceName}} --namespace=${{fromJson(steps.EvaluateParams.outputs.result).namespace}}
          kubectl rollout restart deployment/${{fromJson(steps.EvaluateParams.outputs.result).serviceNameForDatabase}} --namespace=${{fromJson(steps.EvaluateParams.outputs.result).namespace}}
